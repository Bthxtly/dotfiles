{
  "#define macro": {
    "body": [
      "#define ${1:MACRO}"
    ],
    "description": "Textual macro snippet",
    "prefix": "#def"
  },
  "#define macro()": {
    "body": [
      "#define ${1:MACRO}($2) ($3)"
    ],
    "description": "Function-like macro snippet",
    "prefix": "#deff"
  },
  "#error": {
    "body": [
      "#error \"$0\""
    ],
    "description": "#error snippet",
    "prefix": "#err"
  },
  "#if": {
    "body": [
      "#if ${1:0}",
      "$0",
      "#endif /* if $1 */"
    ],
    "description": "#if snippet",
    "prefix": "#if"
  },
  "#ifdef": {
    "body": [
      "#ifdef ${1:MACRO}",
      "$0",
      "#endif /* ifdef $1 */"
    ],
    "description": "#ifdef snippet",
    "prefix": "#ifdef"
  },
  "#ifndef": {
    "body": [
      "#ifndef ${1:MACRO}",
      "$0",
      "#endif /* ifndef $1 */"
    ],
    "description": "#ifndef snippet",
    "prefix": "#ifndef"
  },
  "#include \"...\"": {
    "body": "#include \"$0\"",
    "description": "#include \"...\" snippet",
    "prefix": "incmy"
  },
  "#include <...>": {
    "body": "#include <$0>",
    "description": "#include <...> snippet",
    "prefix": "inc"
  },
  "#warning": {
    "body": [
      "#warning \"$0\""
    ],
    "description": "#warning snippet",
    "prefix": "#warn"
  },
  "Array length": {
    "body": [
      "(sizeof ${1:arr} / sizeof $1[0])"
    ],
    "description": "Calculate number of elements in an array",
    "prefix": "arrlen"
  },
  "Comment block": {
    "body": [
      "/*$0 */"
    ],
    "description": "Convenient comment block",
    "prefix": "/"
  },
  "Complicated typedef": {
    "body": [
      "typedef $0;"
    ],
    "description": "Declaration-like typedef for func-ptr,array,etc.",
    "prefix": "typedeff"
  },
  "Function ...": {
    "body": [
      "${2:void} ${1:fun}(${3:void})$0"
    ],
    "description": "Make a function declaration/definition/pointer",
    "prefix": "fun"
  },
  "Function definition": {
    "body": [
      "${2:void} ${1:fun}(${3:void})",
      "{$0",
      "}"
    ],
    "description": "Define a function",
    "prefix": "func"
  },
  "Multiline comment": {
    "body": [
      "/*$0",
      " */"
    ],
    "description": "Convenient multiline comment",
    "prefix": "//"
  },
  "Preprocessor Starter Template": {
    "body": [
      "#include <assert.h>",
      "#include <errno.h>",
      "#include <stdbool.h>",
      "#include <stddef.h>",
      "#include <stdint.h>",
      "#include <stdio.h>",
      "#include <stdlib.h>"
    ],
    "description": "Preprocessor starter template for a C project",
    "prefix": "#st"
  },
  "Print a variable": {
    "body": [
      "printf(\"$1 = %${2:d}\\n\", ${1:var}$3);"
    ],
    "description": "Call printf() to log value of a variable",
    "prefix": "printv"
  },
  "Starter Template": {
    "body": [
      "#include <stdio.h>",
      "",
      "int main() {",
      "  $0",
      "  return 0;",
      "}"
    ],
    "description": "Standard starter template for a tiny C program",
    "prefix": "st"
  },
  "_GNU_SOURCE": {
    "body": [
      "#define _GNU_SOURCE"
    ],
    "description": "Enable GNU extensions (functions)",
    "prefix": "#gnu"
  },
  "assert": {
    "body": [
      "assert($0);"
    ],
    "description": "assert() snippet",
    "prefix": "assert"
  },
  "calloc": {
    "body": [
      "calloc(${1:1}, sizeof(${2:int})$3)$0"
    ],
    "description": "calloc() snippet",
    "prefix": "calloc"
  },
  "case": {
    "body": [
      "case ${1:0}:$0"
    ],
    "description": "'case' branch",
    "prefix": "case"
  },
  "default": {
    "body": [
      "default:$0"
    ],
    "description": "'default' branch",
    "prefix": "default"
  },
  "do...while": {
    "body": [
      "do {$0",
      "} while (${1:false});"
    ],
    "description": "do...while loop snippet",
    "prefix": "do"
  },
  "elif 1L": {
    "body": [
      "else if (${1:true})$0"
    ],
    "description": "1-line-else-if",
    "prefix": "elseifi"
  },
  "else": {
    "body": [
      "else {$0",
      "}"
    ],
    "description": "'else' snippet",
    "prefix": "else"
  },
  "else if": {
    "body": [
      "else if (${1:true}) {$0",
      "}"
    ],
    "description": "else-if snippet",
    "prefix": "elseif"
  },
  "enum": {
    "body": [
      "enum $1{ $0 };"
    ],
    "description": "Define an enumeration",
    "prefix": "enum"
  },
  "err": {
    "body": [
      "err(${1:EXIT_FAILURE}, \"${2:%s}\"$0);"
    ],
    "description": "err() snippet",
    "prefix": "err"
  },
  "errx": {
    "body": [
      "errx(${1:EXIT_FAILURE}, \"${2:%s}\"$0);"
    ],
    "description": "errx() snippet",
    "prefix": "errx"
  },
  "exit": {
    "body": [
      "exit(${1:EXIT_FAILURE});"
    ],
    "description": "exit() snippet",
    "prefix": "exit"
  },
  "extern C": {
    "body": [
      "#ifdef __cplusplus",
      "extern \"C\" {",
      "#endif",
      "$0",
      "",
      "#ifdef __cplusplus",
      "} /* extern \"C\" */",
      "#endif"
    ],
    "description": "Disable C++ name mangling in C headers",
    "prefix": "#nocpp"
  },
  "fgets() errcheck": {
    "body": [
      "if (!${1:status}) {",
      "\t${2:err(EXIT_FAILURE, \"IO is very hard\");}",
      "}"
    ],
    "description": "Error checking for pointer-type IO functions",
    "prefix": "chkio_null"
  },
  "for": {
    "body": [
      "for ($1;$2;$3) {$0",
      "}"
    ],
    "description": "Generic 'for' loop",
    "prefix": "for"
  },
  "for argv[]": {
    "body": [
      "for (int ${1:i} = ${2:1}; $1 < argc; $1++) {$0",
      "}"
    ],
    "description": "'for' loop for cmdline arguments",
    "prefix": "fora"
  },
  "for count": {
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:count}; $2${5:++}) {$0",
      "}"
    ],
    "description": "'for' loop focusing on iteration times",
    "prefix": "forc"
  },
  "for range": {
    "body": [
      "for (${1:size_t} ${2:i} = ${3:1}; $2 <= ${4:last}; $2${5:++}) {$0",
      "}"
    ],
    "description": "'for' loop focusing on inclusive range",
    "prefix": "forg"
  },
  "fprintf": {
    "body": [
      "fprintf(${1:stderr}, \"${2:%s}\\n\"$3)$0"
    ],
    "description": "fprintf() snippet",
    "prefix": "fprintf"
  },
  "fputs": {
    "body": [
      "fputs(\"${2:This is a simpler printf.\\n}\", ${1:stdout})$0"
    ],
    "description": "puts() snippet",
    "prefix": "fputs"
  },
  "fputs() errcheck": {
    "body": [
      "if (${1:status} == EOF$2) {",
      "\t${3:err(EXIT_FAILURE, \"IO is hard\");}",
      "}"
    ],
    "description": "Error checking for int IO functions",
    "prefix": "chkio_eof"
  },
  "free": {
    "body": [
      "free(${1:NULL});"
    ],
    "description": "free() snippet",
    "prefix": "free"
  },
  "fscanf": {
    "body": [
      "fscanf(${1:stdin}, \"${2:%d}\"$3)$0"
    ],
    "description": "fscanf() snippet",
    "prefix": "fscanf"
  },
  "fseek() errcheck": {
    "body": [
      "if (${1:status} == -1$2) {",
      "\t${3:err(EXIT_FAILURE, \"IO is super hard\");}",
      "}"
    ],
    "description": "Error checking for fseek(), getline() like functions",
    "prefix": "chkio_mi"
  },
  "if": {
    "body": [
      "if (${1:true}) {$0",
      "}"
    ],
    "description": "'if' snippet",
    "prefix": "if"
  },
  "if 1L": {
    "body": [
      "if (${1:true})$0"
    ],
    "description": "1-line-if",
    "prefix": "ifi"
  },
  "if else": {
    "body": [
      "if (${1:true}) {$2",
      "} else {$0",
      "}"
    ],
    "description": "'if' with 'else'",
    "prefix": "ifelse"
  },
  "include once": {
    "body": [
      "#ifndef ${1:FILE}_H",
      "#define $1_H",
      "$0",
      "",
      "#endif /* end of include guard: $1_H */"
    ],
    "description": "Header include guard",
    "prefix": "#once"
  },
  "main() template": {
    "body": [
      "int main(int argc, char *argv[])",
      "{$0",
      "\treturn EXIT_SUCCESS;",
      "}"
    ],
    "description": "Standard main() snippet",
    "prefix": "main"
  },
  "main(void) template": {
    "body": [
      "int main() {",
      "  $0",
      "  return 0;",
      "}"
    ],
    "description": "No-args main() snippet",
    "prefix": "mann"
  },
  "malloc": {
    "body": [
      "malloc(sizeof(${1:int[69]})$2)$0"
    ],
    "description": "malloc() snippet",
    "prefix": "malloc"
  },
  "malloc() errcheck": {
    "body": [
      "if (!${1:status}) {",
      "\t${2:err(EXIT_FAILURE, \"Your memory is doomed\");}",
      "}"
    ],
    "description": "Error checking for malloc()-like",
    "prefix": "chkmem"
  },
  "printf": {
    "body": [
      "printf(\"${1:%s}\\n\"$2)$0"
    ],
    "description": "printf() snippet",
    "prefix": "printf"
  },
  "printf() errcheck": {
    "body": [
      "if (${1:status} < 0$2) {",
      "\t${3:err(EXIT_FAILURE, \"Ran out of ink\");}",
      "}"
    ],
    "description": "Error checking for printf()-like functions",
    "prefix": "chkio_neg"
  },
  "puts": {
    "body": [
      "puts(\"${1:This function doesn't need newline.}\")$0"
    ],
    "description": "puts() snippet",
    "prefix": "puts"
  },
  "realloc": {
    "body": [
      "realloc(${1:ptr}, sizeof(${2:int[69]})$3)$0"
    ],
    "description": "realloc() snippet",
    "prefix": "realloc"
  },
  "reallocarray": {
    "body": [
      "reallocarray(${1:ptr}, ${2:69}, sizeof(${3:int})$4)$0"
    ],
    "description": "reallocarray() snippet",
    "prefix": "reallocarray"
  },
  "return": {
    "body": [
      "return ${1:0};"
    ],
    "description": "'return' snippet",
    "prefix": "return"
  },
  "scanf": {
    "body": [
      "scanf(\"${1:%d}\"$2)$0"
    ],
    "description": "scanf() snippet",
    "prefix": "scanf"
  },
  "snprintf": {
    "body": [
      "snprintf(${1:buf}, ${2:max}, \"${3:%s}\\n\"$3)$0"
    ],
    "description": "snprintf() snippet",
    "prefix": "snprintf"
  },
  "sprintf": {
    "body": [
      "sprintf(${1:buf}, \"${2:%s}\\n\"$3)$0"
    ],
    "description": "sprintf() snippet",
    "prefix": "sprintf"
  },
  "sscanf": {
    "body": [
      "sscanf(${1:buf}, \"${2:%d}\"$3)$0"
    ],
    "description": "sscanf() snippet",
    "prefix": "sscanf"
  },
  "static_assert": {
    "body": [
      "static_assert(${1:false}, \"${2:Oopsie}\");"
    ],
    "description": "static_assert() snippet",
    "prefix": "static_assert"
  },
  "struct": {
    "body": [
      "struct ${1:MyStruct} {$0",
      "};"
    ],
    "description": "'struct' snippet",
    "prefix": "struct"
  },
  "struct type": {
    "body": [
      "typedef struct $1 ${1:Box};",
      "struct $1 {$0",
      "};"
    ],
    "description": "Define a type with struct",
    "prefix": "typestruct"
  },
  "switch": {
    "body": [
      "switch (${1:expression}) {$0",
      "}"
    ],
    "description": "'switch' snippet",
    "prefix": "switch"
  },
  "typedef": {
    "body": [
      "typedef ${1:void} ${2:Emptiness};"
    ],
    "description": "'typedef' snippet",
    "prefix": "typedef"
  },
  "typedef struct": {
    "body": [
      "typedef struct $1 ${1:Box};"
    ],
    "description": "Implicit struct typedef",
    "prefix": "typedefst"
  },
  "typedef union": {
    "body": [
      "typedef union $1 ${1:Cell};"
    ],
    "description": "Implicit union typedef",
    "prefix": "typedefun"
  },
  "union": {
    "body": [
      "union ${1:MyUnion} {$0",
      "};"
    ],
    "description": "'union' snippet",
    "prefix": "union"
  },
  "union type": {
    "body": [
      "typedef union $1 ${1:Cell};",
      "union $1 {$0",
      "};"
    ],
    "description": "Define a type with union",
    "prefix": "typeunion"
  },
  "warn": {
    "body": [
      "warn(\"${1:%s}\"$0);"
    ],
    "description": "warn() snippet",
    "prefix": "warn"
  },
  "warnx": {
    "body": [
      "warnx(\"${1:%s}\"$0);"
    ],
    "description": "warnx() snippet",
    "prefix": "warnx"
  },
  "while": {
    "body": [
      "while (${1:true}) {$0",
      "}"
    ],
    "description": "'while' loop snippet",
    "prefix": "while"
  }
}
